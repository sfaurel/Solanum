---
import Layout from "@layouts/Layout.astro";
import { UserButton } from "@clerk/astro/components";
import TaskForm from "@components/TaskForm.tsx";
import Pomodoro from "@components/Pomodoro.tsx";
import ProjectSwitcher from "@components/ProjectSwitcher.tsx";
import TasksList from "@components/TasksList.tsx"

const user = await Astro.locals.currentUser();
if (!user) return new Response("Unauthorized", { status: 401 });

const boardId = import.meta.env.NOTION_DATABASE_ID;


const propertiesUrl = new URL(`/api/boards/${boardId}/properties`, Astro.request.url);
const boardPropertiesResponse = await fetch(propertiesUrl.toString(), {
  headers: {
    'cookie': Astro.request.headers.get('cookie') || '',
    'authorization': Astro.request.headers.get('authorization') || ''
  }
});
const boardProperties = await boardPropertiesResponse.json();
---

<Layout>
    <nav
        class="fixed top-0 z-50 w-full bg-white border-b border-midnight-200 dark:bg-midnight-800 dark:border-midnight-700"
    >
        <div class="px-3 py-3 lg:px-5 lg:pl-3">
            <div class="flex items-center justify-between">
                <div class="flex items-center justify-start rtl:justify-end">
                    <a href="/" class="flex ms-2 md:me-24">
                        <img
                            src="logo.svg"
                            class="h-8 me-3 aspect-square"
                            alt="Solanum Logo"
                        />
                        <span
                            class="self-center text-xl font-semibold sm:text-2xl whitespace-nowrap dark:text-emerald-500"
                            >Solanum</span
                        >
                    </a>
                </div>
                <div class="flex items-center">
                    <div class="flex items-center ms-3">
                        <UserButton />
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <aside
        id="logo-sidebar"
        class="fixed top-0 left-0 z-40 w-64 h-screen pt-20 transition-transform -translate-x-full bg-white border-r border-midnight-200 sm:translate-x-0 dark:bg-midnight-800 dark:border-midnight-700"
        aria-label="Sidebar"
    >
        <div
            class="h-full px-3 pb-4 overflow-y-auto bg-white dark:bg-midnight-800"
        >
            <ProjectSwitcher client:load />
            <!-- <button id="focus-session-button" client:only>Add Focus Session</button> -->
            <TasksList client:load />
            <!-- <ul class="space-y-2 font-medium">
                {
                    board.map((groups) =>
                        groups.options.map((option) => (
                            <li>
                                <details class="group">
                                    <summary class="flex items-center justify-between px-2 py-2 rounded-lg cursor-pointer text-midnight-900 dark:text-white hover:bg-midnight-100 dark:hover:bg-midnight-700">
                                        <span class="flex items-center space-x-2">
                                            <ArrowIcon className="w-4 h-4 text-midnight-400 group-open:rotate-90 transition-transform" />

                                            <span>{option.option}</span>
                                        </span>
                                        <button class="text-sm text-midnight-600 dark:text-midnight-200 hover:underline">
                                            â‹®
                                        </button>
                                    </summary>
                                    <ul class="pl-6 mt-2 space-y-1">
                                        {option.tasks.map((task, index) => (
                                            <li>
                                                <task-select data-task={JSON.stringify(task)}>
                                                    <button
                                                        type="button"
                                                        class="select-task
                                                        w-full text-left flex items-center p-2
                                                        rounded-lg text-midnight-900 
                                                        dark:text-white 
                                                        hover:bg-midnight-100 dark:hover:bg-midnight-700 
                                                        focus:outline-none cursor-pointer
                                                        active:bg-midnight-200 dark:active:bg-midnight-600
                                                        transition-colors duration-100 ease-in-out: 
                                                        "
                                                    >
                                                        {task?.properties?.Name
                                                            ?.title[0]
                                                            ?.plain_text ||
                                                            "Unnamed Task"}
                                                    </button>
                                                </task-select>
                                            </li>
                                        ))}
                                    </ul>
                                </details>
                            </li>
                        )),
                    )
                }
            </ul> -->
        </div>
    </aside>
    <div class="hidden sm:block pt-6 sm:ml-64 mt-14 px-24">
        <Pomodoro client:load />
        <TaskForm properties={boardProperties} client:load />
    </div>
</Layout>


<script>
  class TaskSelect extends HTMLElement {
    connectedCallback() {
      const task = JSON.parse(this.dataset.task);
      const button = this.querySelector('button');
      button?.addEventListener('click', () => {
        window.dispatchEvent(new CustomEvent("task:selected", { detail: task }));
      });
    }
  }

  customElements.define('task-select', TaskSelect);

   document.getElementById('focus-session-button')?.addEventListener('click', async () => {
    const response = await fetch('http://localhost:4321/api/boards/123/tasks/1f9acd6d57e281359f1ddfe05125fdf8/focus_sessions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        duration: 25,
        user: 'juan.perez'
      }),
    });

    if (response.ok) {
      alert('Focus session logged successfully!');
    } else {
      alert('Error logging focus session.');
      console.error(await response.text());
    }
  });
</script>